--Triggers

--Actualizar el total del carrito
CREATE OR REPLACE TRIGGER TRG_UPDATE_CARRITO_TOTAL
AFTER INSERT OR UPDATE OR DELETE ON CARRITO_PRODUCTO
FOR EACH ROW
BEGIN
    DECLARE
        TOTAL_CARRITO NUMBER(10, 2);
    BEGIN
        SELECT NVL(SUM(CP.CANTIDAD * P.PRECIO), 0)
        INTO TOTAL_CARRITO
        FROM CARRITO_PRODUCTO CP
        INNER JOIN PRODUCTOS P ON CP.ID_PRODUCTO = P.ID_PRODUCTO
        WHERE CP.ID_CARRITO = :NEW.ID_CARRITO;
        
        UPDATE CARRITO
        SET TOTAL = TOTAL_CARRITO
        WHERE ID_CARRITO = :NEW.ID_CARRITO;
    END;
END;
/

--Actualizar el stock en inventario
CREATE OR REPLACE TRIGGER TRG_UPDATE_INVENTORY_ON_ORDER
AFTER INSERT ON ORDENES_PRODUCTOS
FOR EACH ROW
BEGIN
    UPDATE INVENTARIO
    SET CANTIDAD = CANTIDAD - :NEW.CANTIDAD
    WHERE ID_PRODUCTO = :NEW.ID_PRODUCTO
    AND CANTIDAD >= :NEW.CANTIDAD; 
END;
/

--Evitar que se elimine un cliente
CREATE OR REPLACE TRIGGER TRG_PREVENT_DELETE_CLIENTE
BEFORE DELETE ON CLIENTES
FOR EACH ROW
DECLARE
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT FROM CARRITO WHERE ID_CLIENTE = :OLD.ID_CLIENTE;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar el cliente porque tiene carritos asociados.');
    END IF;

    SELECT COUNT(*) INTO V_COUNT FROM ORDENES WHERE ID_CLIENTE = :OLD.ID_CLIENTE;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'No se puede eliminar el cliente porque tiene órdenes asociadas.');
    END IF;
END;
/

--Registrador fecha de última actualización
CREATE OR REPLACE TRIGGER TRG_UPDATE_INVENTARIO_FECHA
BEFORE UPDATE ON INVENTARIO
FOR EACH ROW
BEGIN
    :NEW.ULTIMA_ACTUALIZACION := SYSDATE;
END;
/

--Evitar que se agreguen productos con precio negativo
CREATE OR REPLACE TRIGGER TRG_PREVENT_NEGATIVE_PRICE
BEFORE INSERT OR UPDATE ON PRODUCTOS
FOR EACH ROW
BEGIN
    IF :NEW.PRECIO < 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'El precio de un producto no puede ser negativo.');
    END IF;
END;
/

